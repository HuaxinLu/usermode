AC_INIT([usermode], [1.89])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_SRCDIR([userhelper.c])
AC_CONFIG_AUX_DIR([admin])
AM_INIT_AUTOMAKE([dist-bzip2 -Wall])
AC_PREFIX_DEFAULT([/usr])

AC_PROG_CC
AC_PATH_PROG([MOUNT], [mount], [/bin/mount], [/sbin:/bin:/usr/sbin:/usr/bin])
AC_PATH_PROG([UMOUNT], [umount], [/bin/umount], [/sbin:/bin:/usr/sbin:/usr/bin])
AC_PATH_PROG([MKFS], [mkfs], [/sbin/mkfs], [/sbin:/bin:/usr/sbin:/usr/bin])
AC_PATH_PROG([FDFORMAT], [fdformat], [/usr/bin/fdformat],
	     [/sbin:/bin:/usr/sbin:/usr/bin])
AC_DEFINE_UNQUOTED([PATH_MOUNT], ["$MOUNT"], [Path to the mount command])
AC_DEFINE_UNQUOTED([PATH_UMOUNT], ["$UMOUNT"], [Path to the umount command])
AC_DEFINE_UNQUOTED([PATH_FDFORMAT], ["$FDFORMAT"],
		   [Path to the fdformat command])
AC_DEFINE_UNQUOTED([PATH_MKFS], ["$MKFS"], [Path to the mkfs command])

GETTEXT_PACKAGE=usermode
AC_SUBST([GETTEXT_PACKAGE])
AM_GLIB_GNU_GETTEXT
IT_PROG_INTLTOOL
AC_PATH_XTRA
PKG_CHECK_MODULES([GLIB], [glib-2.0])
PKG_CHECK_MODULES([GTK], [gtk+-2.0 >= 2.9.0])
PKG_CHECK_MODULES([LIBGLADE], [libglade-2.0])
PKG_CHECK_MODULES([LIBUSER], [libuser])
AC_CACHE_CHECK([for startup notification], [mitr_cv_lib_sn],
[mitr_cv_lib_sn=no
if pkg-config libstartup-notification-1.0 && pkg-config libwnck-1.0 ; then
  mitr_cv_lib_sn=yes
fi])
if test $mitr_cv_lib_sn = yes; then
	PKG_CHECK_MODULES([SN_WNCK], [libstartup-notification-1.0 libwnck-1.0])
	AC_DEFINE([USE_STARTUP_NOTIFICATION], [1],
		  [Define if consolehelper should interact with startup notification.])
	AC_DEFINE([WNCK_I_KNOW_THIS_IS_UNSTABLE], [1],
		  [Define if you want to use libwnck, even though it is not yet API-stabilized, because we need to use it.])
	AC_DEFINE([SN_API_NOT_YET_FROZEN], [1],
		  [Define if you want to use libsn, even though it is not yet API-stabilized, because we need to use it.])
fi
AC_CHECK_FUNC([pam_start], ,
              [AC_CHECK_LIB([pam], [pam_start], [PAM_LIBS="-lpam"])])
AC_CHECK_FUNC([misc_conv], ,
	      [AC_CHECK_LIB([pam_misc], [misc_conv],
			    [PAM_LIBS="-lpam_misc $PAM_LIBS"])])
AC_SUBST([PAM_LIBS])

AC_MSG_CHECKING([whether we should avoid deprecated functions])
AC_ARG_ENABLE([deprecation],
	      AS_HELP_STRING([--enable-deprecation],
	      		     [prohibit use of deprecated GTK+ features]),
	      [usedeprecation=$enableval], [usedeprecation=no])
if test "x$usedeprecation" = xyes ; then
	AC_DEFINE([G_DISABLE_DEPRECATED], ,
		  [Disable use of deprecated GLib APIs.])
	AC_DEFINE([GTK_DISABLE_DEPRECATED], ,
		  [Disable use of deprecated GTK+ APIs.])
fi
AC_MSG_RESULT([$usedeprecation])

test "x$prefix" = xNONE && prefix=$ac_default_prefix
test "x$exec_prefix" = xNONE && exec_prefix=${prefix}

BINDIR=`eval echo ${bindir}`
AC_DEFINE_UNQUOTED([BINDIR], ["$BINDIR"], [bindir value])
SBINDIR=`eval echo ${sbindir}`
AC_DEFINE_UNQUOTED([SBINDIR], ["$SBINDIR"], [sbindir value])
DATADIR=`eval echo ${datadir}`
AC_DEFINE_UNQUOTED([DATADIR], ["$DATADIR"], [datadir value])
AC_DEFINE_UNQUOTED([LOCALEDIR], ["$DATADIR/locale"], [localedir value])
SYSCONFDIR=`eval echo ${sysconfdir}`
AC_DEFINE_UNQUOTED([SYSCONFDIR], ["$SYSCONFDIR"], [sysconfdir value])
AC_SUBST([BINDIR])
AC_SUBST([SBINDIR])
AC_SUBST([DATADIR])
AC_SUBST([SYSCONFDIR])

AC_MSG_CHECKING([whether we should enable debugging messages])
AC_ARG_ENABLE([debug],
	      AS_HELP_STRING([--enable-debug], [Enable debugging messages]),
	      [debug=${enableval}], [debug=no])
if test "x$debug" != xno ; then
	AC_DEFINE([DEBUG_USERHELPER], [1], [Enable debugging messages])
fi
AC_MSG_RESULT([$debug])

AC_MSG_CHECKING([whether we should use ElectricFence])
AC_ARG_WITH([efence],
	    AS_HELP_STRING([--with-efence], [Enable use of ElectricFence]),
	    [efence=${withval}], [efence=no])
EFENCE_LIBS=
if test "x$efence" != xno ; then
	EFENCE_LIBS="-lefence"
fi
AC_SUBST([EFENCE_LIBS])
AC_MSG_RESULT([$efence])

AC_MSG_CHECKING([whether we should use SELinux])
AC_ARG_WITH([selinux],
	    AS_HELP_STRING([--with-selinux], [Use SELinux functionality]),
	    [selinux=${withval}], [selinux=no])
SELINUX_LIBS=
if test "x$selinux" != xno ; then
	AC_DEFINE([WITH_SELINUX], [1], [Use SELinux features])
	SELINUX_LIBS="-lselinux"
fi
AC_SUBST([SELINUX_LIBS])
AC_MSG_RESULT([$selinux])

AC_MSG_CHECKING([whether we should use -Werror])
AC_ARG_ENABLE([gccwerror],
	      AS_HELP_STRING([--enable-gccwerror], [Enable -Werror with GCC]),
	      [gccwerror=${enableval}], [gccwerror=no])
if test x$GCC = xyes ; then
	CFLAGS="$CFLAGS -Wall -Wimplicit-int -Wimplicit-function-declaration -Wuninitialized -Wunused -std=c99 -D_GNU_SOURCE"
	if test "x$gccwerror" != xno ; then
		CFLAGS="$CFLAGS -Werror"
	fi
fi
AC_MSG_RESULT([$gccwerror])

AC_CONFIG_FILES([Makefile consolehelper.8 userhelper.8 po/Makefile.in])
AC_OUTPUT
