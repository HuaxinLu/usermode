AC_INIT(usermode.spec)
AM_INIT_AUTOMAKE(usermode,`awk '/^Version:/ { print $$2 }' ${srcdir}/usermode.spec`)
AC_PREFIX_DEFAULT(/usr)
AC_PROG_CC
AC_PATH_PROG(MOUNT,mount,/bin/mount,[/sbin:/bin:/usr/sbin:/usr/bin])
AC_PATH_PROG(UMOUNT,umount,/bin/umount,[/sbin:/bin:/usr/sbin:/usr/bin])
AC_PATH_PROG(MKFS,mkfs,/sbin/mkfs,[/sbin:/bin:/usr/sbin:/usr/bin])
AC_PATH_PROG(FDFORMAT,fdformat,/usr/bin/fdformat,[/sbin:/bin:/usr/sbin:/usr/bin])
AC_DEFINE_UNQUOTED(PATH_MOUNT,"$MOUNT",[path to the mount command])
AC_DEFINE_UNQUOTED(PATH_UMOUNT,"$UMOUNT",[path to the umount command])
AC_DEFINE_UNQUOTED(PATH_FDFORMAT,"$FDFORMAT",[path to the fdformat command])
AC_DEFINE_UNQUOTED(PATH_MKFS,"$MKFS",[path to the mkfs command])
ALL_LINGUAS="ar be bg bn bs ca cs cy da de el es et fi fr gu hi hr hu id is it ja ko mk ms nb nl no pa pl pt pt_BR ro ru sk sl sv ta tr uk vi zh_CN zh_TW"
GETTEXT_PACKAGE=usermode
AC_SUBST(GETTEXT_PACKAGE)
AM_GLIB_GNU_GETTEXT
AC_PROG_INTLTOOL
AC_PATH_XTRA
PKG_CHECK_MODULES(GLIB,glib-2.0)
PKG_CHECK_MODULES(LIBGLADE,libglade-2.0)
if pkg-config libstartup-notification-1.0 ; then
	if pkg-config libwnck-1.0 ; then
		PKG_CHECK_MODULES(SN_WNCK,libstartup-notification-1.0 libwnck-1.0)
		AC_MSG_RESULT([===== Building with startup notification. =====])
		AC_DEFINE(USE_STARTUP_NOTIFICATION,1,
			  [Define if consolehelper should interact with startup notification.])
		AC_DEFINE(WNCK_I_KNOW_THIS_IS_UNSTABLE,1,
			  [Define if you want to use libwnck, even though it is not yet API-stabilized, because we need to use it.])
		AC_DEFINE(SN_API_NOT_YET_FROZEN,1,
			  [Define if you want to use libsn, even though it is not yet API-stabilized, because we need to use it.])
	fi
fi
AC_CHECK_FUNC(pam_start,,[AC_CHECK_LIB(pam,pam_start,PAM_LIBS="-lpam -ldl",dl)])
AC_CHECK_FUNC(misc_conv,,[AC_CHECK_LIB(pam_misc,misc_conv,PAM_LIBS="-lpam_misc $PAM_LIBS",$PAM_LIBS)])
AC_SUBST(PAM_LIBS)

AC_ARG_ENABLE(deprecation,[AC_HELP_STRING(--enable-deprecation,prohibit usermode from using deprecated GTK+ features)],usedeprecation=$enableval,usedeprecation=no)
if test "$usedeprecation" = yes ; then
	AC_MSG_RESULT([===== Disabling use of deprecated GLib and GTK+ APIs. =====])
	AC_DEFINE(G_DISABLE_DEPRECATED,,[Disable use of deprecated GLib APIs.])
	AC_DEFINE(GTK_DISABLE_DEPRECATED,,[Disable use of deprecated GTK+ APIs.])
fi

GLIB_GENMARSHAL=`$PKG_CONFIG --variable=glib_genmarshal glib-2.0`  
AC_SUBST(GLIB_GENMARSHAL)

test "x$prefix" = xNONE && prefix=$ac_default_prefix
test "x$exec_prefix" = xNONE && exec_prefix=${prefix}

BINDIR=`eval echo ${bindir}`
AC_DEFINE_UNQUOTED(BINDIR,"$BINDIR","/usr/bin")
SBINDIR=`eval echo ${sbindir}`
AC_DEFINE_UNQUOTED(SBINDIR,"$SBINDIR","/usr/sbin")
DATADIR=`eval echo ${datadir}`
AC_DEFINE_UNQUOTED(DATADIR,"$DATADIR","/usr/share")
AC_DEFINE_UNQUOTED(LOCALEDIR,"$DATADIR/locale","/usr/share/locale")
SYSCONFDIR=`eval echo ${sysconfdir}`
AC_DEFINE_UNQUOTED(SYSCONFDIR,"$SYSCONFDIR","/etc")
AC_SUBST(BINDIR)
AC_SUBST(SBINDIR)
AC_SUBST(DATADIR)
AC_SUBST(SYSCONFDIR)

debug=no
AC_ARG_ENABLE(debug,[  --enable-debug         Enable debugging messages],
	      debug=${enableval})
if test x$debug != xno ; then
	AC_DEFINE(DEBUG_USERHELPER,1,[enable debugging messages])
	AC_MSG_RESULT([===== Extra debugging messages enabled. =====])
fi

efence=no
EFENCE_LIBS=
AC_ARG_WITH(efence,[  --with-efence          Enable use of ElectricFence],
	    efence=${withval})
if test x$efence != xno ; then
	EFENCE_LIBS="-lefence"
	AC_MSG_RESULT([===== ElectricFence enabled. =====])
fi
AC_SUBST(EFENCE_LIBS)

selinux=no
AC_ARG_WITH(selinux,[  --with-selinux         Use SELinux functionality],
	    selinux=${withval})
if test x$selinux != xno ; then
	AC_DEFINE(WITH_SELINUX,1,[use SELinux features])
	LIBS="$LIBS -lselinux -lattr"
	AC_MSG_RESULT([===== Building with SELinux features. =====])
fi

AM_CONFIG_HEADER(config.h)

gccwerror=no
AC_ARG_ENABLE(gccwerror,[  --enable-gccwerror     Enable -Werror with GCC],
	      gccwerror=${enableval})
if test x$GCC = xyes ; then
	CFLAGS="$CFLAGS -Wall -Wimplicit-int -Wimplicit-function-declaration -Wuninitialized -Wunused -std=c99 -D_GNU_SOURCE"
	if test x$gccwerror != xno ; then
		CFLAGS="$CFLAGS -Werror"
		AC_MSG_RESULT([===== Building with -Werror. =====])
	fi
fi

AC_OUTPUT([ po/Makefile.in
Makefile
consolehelper.8
userhelper.8
])
